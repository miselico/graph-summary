/**
 * Copyright (c) 2012 National University of Ireland, Galway. All Rights Reserved.
 */
package org.sindice.core.analytics.cascading;

import java.lang.reflect.Field;
import java.util.HashSet;
import java.util.Set;

import org.apache.hadoop.hbase.io.hfile.HFile;
import org.sindice.core.analytics.cascading.ConfigurationKey.Reset;
import org.sindice.core.analytics.cascading.dictionary.Dictionary;
import org.sindice.core.analytics.cascading.dictionary.DictionaryFactory.DictionaryType;
import org.sindice.core.analytics.cascading.scheme.HFileScheme;
import org.sindice.core.analytics.rdf.AnalyticsClassAttributes;
import org.sindice.core.analytics.rdf.DocumentFormat;
import org.sindice.core.analytics.rdf.SummaryContext;


/**
 * This class defines parameters that are used in the Analytics.
 * <p>
 * Use the {@link ConfigurationKey} class to define the name and the default value of a parameter.
 */
public class AnalyticsParameters {

  /**
   * Defines the {@link Dictionary} implementation.
   * <p>
   * Default: {@link DictionaryType#HFILE}
   * @see Dictionary
   */
  public final static ConfigurationKey<DictionaryType>  DICTIONARY             = ConfigurationKey
                                                                                .newInstance("dictionary",
                                                                                  new Reset<DictionaryType>() {
                                                                                    @Override
                                                                                    public DictionaryType reset() {
                                                                                      return DictionaryType.HFILE;
                                                                                    }
                                                                                });

  /**
   * Defines the context URI of a data graph summary.
   * 
   * <p>
   * 
   * Default: {@link SummaryContext#SINDICE}
   * 
   * @see SummaryContext
   */
  public final static ConfigurationKey<SummaryContext>  CONTEXT                = ConfigurationKey
                                                                               .newInstance("context", new Reset<SummaryContext>() {
                                                                                 @Override
                                                                                 public SummaryContext reset() {
                                                                                   return SummaryContext.SINDICE;
                                                                                 }
                                                                               });

  /**
   * This parameter defines the dataset URI of the summary graph. It should be used only in the case of summarizing a
   * single dataset.
   * 
   * With <b>http://acme.org</b> as the parameter's value, the summary will be something similar to:
   * 
   * <pre>
   * @PREFIX any23: &lt;http://vocab.sindice.net/&gt;
   * @PREFIX an: &lt;http://vocab.sindice.net/analytics#&gt;
   * 
   * &lt;a&gt; any23:domain_URI &lt;http://acme.org&gt; .
   * &lt;b&gt; any23:domain_URI &lt;http://acme.org&gt; .
   * &lt;edge&gt; an:source &lt;a&gt; .
   * &lt;edge&gt; an:target &lt;b&gt; .
   * &lt;edge&gt; an:publishedIn &lt;http://acme.org&gt; .
   * </pre>
   * 
   * <p>
   * 
   * If not used, we use the namespace <b>http://sindice.com/dataspace/default/domain/</b>, to which we append the
   * dataset label:
   * 
   * <pre>
   * http://sindice.com/dataspace/default/domain/${DATASET-LABEL}
   * </pre>
   * 
   * where <b>${DATASET-LABEL}</b> is defined as the second-level domain name of the entity URI.
   */
  public final static ConfigurationKey<String>          DATASET_URI            = ConfigurationKey
                                                                               .newInstance("dataset-uri", new Reset<String>() {
                                                                                 @Override
                                                                                 public String reset() {
                                                                                   return null;
                                                                                 }
                                                                               });

  /**
   * The prefix for {@link HFile}s filenames generated by {@link HFileScheme}.
   * <p>
   * Default: "hfile"
   */
  public final static ConfigurationKey<String>          HFILE_PREFIX           = ConfigurationKey
                                                                                .newInstance("sindice.hfile.prefix", new Reset<String>() {
                                                                                  @Override
                                                                                  public String reset() {
                                                                                    return "hfile";
                                                                                  }
                                                                                });

  /**
   * The filename extension for the scheme ExtensionTextLine
   * 
   * <p>
   * 
   * Default: nquads
   * extension
   */
  public static final ConfigurationKey<String>          EXTENSION              = ConfigurationKey
                                                                               .newInstance("extension", new Reset<String>() {
                                                                                 @Override
                                                                                 public String reset() {
                                                                                   return "nq";
                                                                                 }
                                                                               });

  /**
   * Check the type authoritativeness
   * 
   * <p>
   * 
   * Default: true
   */
  public static final ConfigurationKey<Boolean>         CHECK_AUTH_TYPE        = ConfigurationKey
                                                                               .newInstance("check-auth-type", new Reset<Boolean>() {
                                                                                 @Override
                                                                                 public Boolean reset() {
                                                                                   return true;
                                                                                 }
                                                                               });

  /**
   * Unwanted list of predicates.
   * 
   * <p>
   * 
   * Default: no black list
   */
  public static final ConfigurationKey<Set<String>> PREDICATES_BLACKLIST = ConfigurationKey
                                                                               .newInstance("predicate-blacklist", new Reset<Set<String>>() {
                                                                                 @Override
                                                                                 public Set<String> reset() {
                                                                                   return new HashSet<String>();
                                                                                 }
                                                                               });

  /**
   * Unwanted list of predicates. Similar to {@link #PREDICATES_BLACKLIST}, except the elements
   * are regular expressions.
   * 
   * <p>
   * 
   * Default: no black list
   */
  public static final ConfigurationKey<Set<String>> PREDICATES_BLACKLIST_REGEXP = ConfigurationKey
                                                                               .newInstance("predicate-blacklist-regexp", new Reset<Set<String>>() {
                                                                                 @Override
                                                                                 public Set<String> reset() {
                                                                                   return new HashSet<String>();
                                                                                 }
                                                                               });

  /**
   * The format of the input documents
   * 
   * <p>
   * 
   * Default: the Sindice export format
   */
  public static final ConfigurationKey<DocumentFormat>  DOCUMENT_FORMAT        = ConfigurationKey
                                                                               .newInstance("document-format", new Reset<DocumentFormat>() {
                                                                                 @Override
                                                                                 public DocumentFormat reset() {
                                                                                   return DocumentFormat.SINDICE_EXPORT;
                                                                                 }
                                                                               });

  /**
   * the default second-level domain to use in case of {@link DocumentFormat#NTRIPLES}
   * 
   * <p>
   * 
   * Default: sindice.com
   */
  public static final ConfigurationKey<String>          DEFAULT_DOMAIN         = ConfigurationKey
                                                                               .newInstance("default-domain", new Reset<String>() {
                                                                                 @Override
                                                                                 public String reset() {
                                                                                   return null;
                                                                                 }
                                                                               });

  /**
   * Normalise Literal Type
   * 
   * <p>
   * 
   * Default: don't process literal types in any way
   */
  public static final ConfigurationKey<Boolean>         NORM_LITERAL_TYPE      = ConfigurationKey
                                                                               .newInstance("normalize-literal-type", new Reset<Boolean>() {
                                                                                 @Override
                                                                                 public Boolean reset() {
                                                                                   return false;
                                                                                 }
                                                                               });

  /**
   * Defines the set of class attributes
   * 
   * <p>
   * 
   * Default: rdf:type
   */
  public static final ConfigurationKey<String[]>        CLASS_ATTRIBUTES_FIELD = ConfigurationKey
                                                                               .newInstance("class-attributes", new Reset<String[]>() {
                                                                                 @Override
                                                                                 public String[] reset() {
                                                                                   return new String[] { AnalyticsClassAttributes.DEFAULT_CLASS_ATTRIBUTE };
                                                                                 }
                                                                               });

  /**
   * Reset the value of the parameters.
   */
  public static void reset() {
    for (Field field : AnalyticsParameters.class.getDeclaredFields()) {
      try {
        if (field.get(null) instanceof ConfigurationKey) {
          ConfigurationKey<?> c = (ConfigurationKey<?>) field.get(null);
          c.reset();
        }
      } catch (IllegalArgumentException e) {} catch (IllegalAccessException e) {}
    }
  }

}
